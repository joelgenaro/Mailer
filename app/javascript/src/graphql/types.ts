export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
};

/** Autogenerated input type of AssistantPurchaseAdditionalTimeMutation */
export type IAssistantPurchaseAdditionalTimeMutationInput = {
  minutes: Scalars['Int'];
  purchaseAmountShown: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AssistantPurchaseAdditionalTimeMutation */
export type IAssistantPurchaseAdditionalTimeMutationPayload = {
  __typename?: 'AssistantPurchaseAdditionalTimeMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errorMessage?: Maybe<Scalars['String']>;
  success: Scalars['Boolean'];
};

export type IBill = {
  __typename?: 'Bill';
  checkoutUrl: Scalars['String'];
  description: Scalars['String'];
  dueDate?: Maybe<Scalars['ISO8601DateTime']>;
  dueDateAbbv?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  paid?: Maybe<Scalars['Boolean']>;
  paidAt?: Maybe<Scalars['String']>;
  processingFee: Scalars['String'];
  processingFeeWithCurrency: Scalars['String'];
  state: Scalars['String'];
  subtotal: Scalars['String'];
  subtotalWithCurrency: Scalars['String'];
  total: Scalars['String'];
  totalWithCurrency: Scalars['String'];
};

/** Autogenerated input type of CreateMailForwardRequestMutation */
export type ICreateMailForwardRequestMutationInput = {
  postalMailId: Scalars['ID'];
  address: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateMailForwardRequestMutation */
export type ICreateMailForwardRequestMutationPayload = {
  __typename?: 'CreateMailForwardRequestMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errorMessage?: Maybe<Scalars['String']>;
  forwardRequest?: Maybe<IMailForwardRequest>;
  success: Scalars['Boolean'];
};


/** A request for forwarding of a mail postal item */
export type IMailForwardRequest = {
  __typename?: 'MailForwardRequest';
  address: Scalars['String'];
  forwardedAt?: Maybe<Scalars['ISO8601DateTime']>;
  id: Scalars['ID'];
  requestedAt?: Maybe<Scalars['ISO8601DateTime']>;
  state: Scalars['String'];
};

export type IMailItem = {
  __typename?: 'MailItem';
  id: Scalars['ID'];
  large?: Maybe<Scalars['String']>;
  medium?: Maybe<Scalars['String']>;
  thumbnail?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export type IMutation = {
  __typename?: 'Mutation';
  /** Allows user to purchase additional time that is available as per their plan */
  assistantPurchaseAdditionalTime?: Maybe<IAssistantPurchaseAdditionalTimeMutationPayload>;
  /** Creates a forward request for provided postal mail */
  createMailForwardRequest?: Maybe<ICreateMailForwardRequestMutationPayload>;
  newsletterSubscription?: Maybe<INewsletterSubscriptionMutationPayload>;
  updateNotes?: Maybe<IPostalMail>;
};


export type IMutationAssistantPurchaseAdditionalTimeArgs = {
  input: IAssistantPurchaseAdditionalTimeMutationInput;
};


export type IMutationCreateMailForwardRequestArgs = {
  input: ICreateMailForwardRequestMutationInput;
};


export type IMutationNewsletterSubscriptionArgs = {
  input: INewsletterSubscriptionMutationInput;
};


export type IMutationUpdateNotesArgs = {
  input: IUpdateNotesMutationInput;
};

/** Autogenerated input type of NewsletterSubscriptionMutation */
export type INewsletterSubscriptionMutationInput = {
  name: Scalars['String'];
  email: Scalars['String'];
  pdfType?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of NewsletterSubscriptionMutation */
export type INewsletterSubscriptionMutationPayload = {
  __typename?: 'NewsletterSubscriptionMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['Int']>;
  success: Scalars['Boolean'];
};

/** Information about pagination in a connection. */
export type IPageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

export type IPaymentMethod = {
  __typename?: 'PaymentMethod';
  cardLast4: Scalars['String'];
  cardType: Scalars['String'];
  id: Scalars['ID'];
};

export type IPostalMail = {
  __typename?: 'PostalMail';
  bill?: Maybe<IBill>;
  forwardRequest?: Maybe<IMailForwardRequest>;
  id: Scalars['ID'];
  mailItems?: Maybe<Array<IMailItem>>;
  notes?: Maybe<Scalars['String']>;
  openUrl?: Maybe<Scalars['String']>;
  previewThumbnail?: Maybe<Scalars['String']>;
  receivedOn: Scalars['ISO8601DateTime'];
  receivedOnAbbv: Scalars['String'];
  state: Scalars['String'];
  stateHumanized: Scalars['String'];
  user: IUser;
  toggleArchiveUrl: Scalars['String'];
  archived: Scalars['Boolean'];
  deleteMailUrl: Scalars['String'];
  shred: Scalars['Boolean'];
  shredMailUrl: Scalars['String'];
};

/** The connection type for PostalMail. */
export type IPostalMailConnection = {
  __typename?: 'PostalMailConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<IPostalMailEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<IPostalMail>>>;
  /** Information to aid in pagination. */
  pageInfo: IPageInfo;
};

/** An edge in a connection. */
export type IPostalMailEdge = {
  __typename?: 'PostalMailEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<IPostalMail>;
};

export type IQuery = {
  __typename?: 'Query';
  postalMail?: Maybe<IPostalMail>;
  postalMails?: Maybe<IPostalMailConnection>;
};


export type IQueryPostalMailArgs = {
  id: Scalars['ID'];
};


export type IQueryPostalMailsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  search?: Maybe<Scalars['String']>;
  filter?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateNotesMutation */
export type IUpdateNotesMutationInput = {
  id: Scalars['ID'];
  notes: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type IUser = {
  __typename?: 'User';
  changeCardUrl: Scalars['String'];
  defaultPaymentMethod?: Maybe<IPaymentMethod>;
  email: Scalars['String'];
  id: Scalars['ID'];
};
